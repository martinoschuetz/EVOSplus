#!/usr/bin/wish -f
###!/c/Programme/Tcl/bin/wish83.exe -f
###!/app/unido-inf/sun4_55/tk/8.0p2/bin/wish -f
###!/usr/local/tcl-95b/bin/wish -f

#	TkJoe - Provide a friendly user interface for each program
#	        using getparam()
#
# 	Copyright (C) 1994 Joachim Sprave
# 
# 	This program is free software; you can redistribute it and/or modify
# 	it under the terms of the GNU General Public License as published by
# 	the Free Software Foundation; either version 2 of the License, or
# 	(at your option) any later version.
# 
# 	This program is distributed in the hope that it will be useful,
# 	but WITHOUT ANY WARRANTY; without even the implied warranty of
# 	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# 	GNU General Public License for more details.
# 
# 	You should have received a copy of the GNU General Public License
# 	along with this program; if not, write to the Free Software
# 	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.





#----------------------------------------------------------------------
# Set multipleWindows to 0 if you don't want separate windows for each
# parameter group

set multipleWindows 1

#----------------------------------------------------------------------
# Options

option clear
option add *background lightblue
option add *foreground black
option add *activeBackground lightgrey
option add *activeForeground LightSlateBlue
option add *selectBackground slategrey
option add *disabledForeground lightblue
option add *Scrollbar.Foreground grey
option add *Font -*-lucidatypewriter-medium-*-*-*-*-*-*-*-*-*-*-*

if {[info tclversion] >= 7.4} {
	option add *Radiobutton.selectColor red
	option add *Checkbutton.selectColor red
	option add *Menu.TearOff no
}

. configure -bg lightblue

wm minsize . 100 50

#----------------------------------------------------------------------
# Frames and menus
#

frame .menu -borderwidth 1 -background grey


menubutton .menu.file -text File -menu .menu.file.m \
	-relief raised -width 10  -fg yellow -bg blue
menu .menu.file.m

.menu.file.m add command -label "New       "  -command newParms  
.menu.file.m add command -label Open -command openParms 
.menu.file.m add command -label Save -command saveParms 
.menu.file.m add command -label View -command viewParms 
.menu.file.m add separator
.menu.file.m add command -label Quit -command {cleanUp; exit} 

menubutton .menu.run -text Run -menu .menu.run.m \
	-relief raised -width 10 -fg yellow -bg blue
menu .menu.run.m

.menu.run.m add command  -label "XTerm     "	-command {runProg xterm -e} 
.menu.run.m add command -label Background	-command {runProg}
.menu.run.m add command -label Foreground	-command {fgRun}
.menu.run.m add command -label Nice		-command {runProg nice -19}

menubutton .menu.kill -text Kill -menu .menu.kill.m \
	-relief raised -width 10 -fg yellow -bg blue
menu .menu.kill.m

.menu.kill.m add command -label "Terminate  "	-command "killProg 15" 
.menu.kill.m add command -label "Kill"		-command "killProg 9"


pack .menu.file .menu.run .menu.kill -fill x -expand yes -side left
pack .menu -side top -fill x -expand yes -anchor n


proc nameTokey {nam} {
	return [string tolower $nam]
}

#	%%% INCLUDE DEFINITIONS %%%
#	%%% START CONFIG %%%			
#----------------------------------------------------------------------
# Read the configuration
#

proc readConfig {fname} {

	global keys
	global name
	global desc
	global type
	global vlue
	global dflt
	global cont
	global optn
	global path
	global exst

	global defs
	global cmd
	
	set defs "
proc createAll \{\} \{
	global keys
	global desc
	global type
	global vlue
	global dflt
	global cont
	global optn
	global path
	global exst
	global name
	global frames
	global multipleWindows
"
	set pframe {}
	set nam _root_
	set dsc "$cmd"

	set fd [open $fname r]
	while {[gets $fd line] > -1} {
		set tmp [lindex $line 0]
		if { $tmp == "" || [regexp {#.*} $tmp] || [regexp {ld\.so.*} $tmp]} continue
		if {$pframe == {} || [scan $line {LABEL %s "%[^"]"} nam dsc]} {
			set kwd [nameTokey $nam]
			set pframe .$kwd
			lappend frms $pframe
			set desc($pframe) {$dsc}
			set defs "$defs
#---------- Frame $kwd: $dsc

	lappend frames $pframe
	set desc($pframe) \{$dsc\}
	if \{\$multipleWindows\} \{
		toplevel $pframe
		wm title $pframe \{$dsc\}
	\} else \{
		frame $pframe -borderwidth 2 -relief sunken
	\}
	frame $pframe.entries
	frame $pframe.buttons
"
			if {$pframe != "._root_"} continue
		}
		if {[scan $line {%s %s "%[^"]" %s %s %s} nam opt dsc typ val def] < 6} {
			set def {}
		}
		set dsc [string trim $dsc]
		set kwd [nameTokey $nam]
		set name($kwd) $nam
		set optn($kwd) $opt
		set desc($kwd) $dsc
		set type($kwd) $typ
		set vlue($kwd) $val
		set dflt($kwd) $def
		set path($kwd) "$pframe"

		set defs "$defs
#---------- $dsc: key is $nam, type is $typ

	lappend keys $kwd
	set exst($kwd) 0
	set name($kwd) \{$nam\}
	set optn($kwd) \{$opt\}
	set desc($kwd) \{$dsc\}
	set type($kwd) \{$typ\}
	set vlue($kwd) \{$val\}
	set dflt($kwd) \{$def\}
	set path($kwd) \{$pframe\}

"

		createNew$typ $kwd $pframe

		set kw $kwd
	}
	close $fd

	set defs "$defs
	if \{\$multipleWindows\} \{
		if \{\[llength \$frames\] > 1\} \{ 
			menubutton .menu.more -text \"More...\" \\
			-menu .menu.more.m -relief raised \\
			-width 10 -fg yellow -bg blue
			menu .menu.more.m
#			bind .menu.more <Enter> \{
#				foreach f \$frames \{
#					if \{\[wm state \$f\]\ != \"normal\"\} \{
#						set m_\$f 0
#					\} else \{
#						set m_\$f 1
#					\}
#				\}
#			\}
			pack .menu.file .menu.run .menu.kill .menu.more \\
				-fill x -expand yes -side left
			pack .menu -side top -fill x -expand yes -anchor n

		\}
		if \{\[info tclversion\] >= 7.4\} \{
			update
		\}
"
		foreach f $frms {
			if {$f != "._root_"} {
				set defs "$defs
		.menu.more.m add checkbutton -label \$desc($f) \\
			-variable m_$f -command \"toggleWin $f\"
		wm withdraw $f
"
			}
		}
		foreach f $frms {
			set defs "$defs
		pack $f.entries $f.buttons -side left -expand yes -fill y
"
		}

		set defs "$defs
	\} else \{
"
		foreach f $frms {
			set defs "$defs
		label $f.l -bg lightskyblue -text \$desc($f)
		pack $f.l -side top -fill x -expand yes -anchor n
		pack $f.entries $f.buttons -side left -expand yes -fill y
		pack $f -side top -expand yes -fill x
"
		}
		set defs "$defs
	\}
"
		set defs "$defs
\}"

# uncomment for debugging
#	set fd [open defs "w"]
#	puts $fd $defs
#	close $fd
	eval $defs
	createAll
	set fdin  [open [info script] "r"]
	set fdout [open  Tk[file tail $cmd] "w"]
	set include 1
	while {[gets $fdin line] != -1} {
		switch -regexp $line {
			"^#.*%%% START CONFIG %%%" {
				set include 0
			}
			"^#.*%%% END CONFIG %%%" {
				set include 1
			}
			"^#.*%%% INCLUDE STARTUP %%%" {
				puts $fdout "	set cmd \"$cmd\""
				puts $fdout "	createAll"
			}
			"^#.*%%% INCLUDE DEFINITIONS %%%" {
				puts $fdout $defs
			}
			default {
				if {$include == 1} {
					puts $fdout $line
				}
			}
		}
	}
	close $fdin
	close $fdout

}

proc getForeground {opt} {
	if {$opt == {*}} {
		set ret blue
	} else {
		set ret black
	}
	return $ret
}

#----------------------------------------------------------------------
# Create functions: create an item for a given key word according to
#                   its type
#
proc createNewboolean {kw {fr {}}} {

	global keys
	global desc
	global type
	global vlue
	global dflt
	global optn
	global cont
	global defs

	set yesno [split $vlue($kw) {|}]
	set defs "$defs

	checkbutton $fr.buttons.$kw \\
		-text \$desc($kw) \\
		-onvalue  [lindex $yesno 1] \\
		-offvalue [lindex $yesno 0] \\
		-command \"set exst($kw) 1\" \\
		-variable cont($kw) -foreground [getForeground $optn($kw)]
	pack $fr.buttons.$kw -side top -expand yes -anchor nw

	$fr.buttons.$kw invoke
"
}

proc createNewenum {kw {fr {}}} {

	global keys
	global desc
	global type
	global vlue
	global dflt
	global optn
	global cont
	global defs

	set defs "$defs

	frame $fr.buttons.$kw -relief sunken -borderwidth 1

	label $fr.buttons.$kw.l -background lightgrey -text \$desc($kw)
	pack $fr.buttons.$kw.l -side top -expand yes -fill x
"
	foreach v [split $vlue($kw) {|}] {
	set defs "$defs
	radiobutton $fr.buttons.$kw.$v \\
		-text $v \\
		-variable cont($kw) \\
		-value $v \\
		-command \"set exst($kw) 1\" \\
		-relief flat -foreground [getForeground $optn($kw)]

	pack $fr.buttons.$kw.$v -side top -expand yes -anchor w
"
	}
set defs "$defs
	pack $fr.buttons.$kw -side top -expand yes -fill x -anchor nw
	$fr.buttons.$kw.[lindex [split $vlue($kw) {|}] 0] invoke
"
}

proc createNewstring {kw {fr {}}} {

	global keys
	global desc
	global type
	global vlue
	global dflt
	global optn
	global cont
	global exst
	global defs

	set defs "$defs

	frame $fr.entries.$kw

	label $fr.entries.$kw.label  -text \$desc($kw) -foreground [getForeground $optn($kw)]
	entry $fr.entries.$kw.entry -width 10 -relief raised -borderwidth 2
	pack  $fr.entries.$kw.entry -side left
	pack  $fr.entries.$kw.label -side left -expand y -anchor w
	pack  $fr.entries.$kw -side top -expand yes -fill x -anchor nw
	bind  $fr.entries.$kw.entry <Leave> \"updateEntry $kw\"
	set cont($kw) \{\}
"
}

proc createNewinteger {kw {fr {}}} {

	global keys
	global desc
	global type
	global vlue
	global dflt
	global optn
	global cont
	global exst
	global defs

	set defs "$defs

	frame $fr.entries.$kw

	label $fr.entries.$kw.label  -text \$desc($kw) -foreground [getForeground $optn($kw)]
	entry $fr.entries.$kw.entry -width 10 -relief raised -borderwidth 2
	pack  $fr.entries.$kw.entry -side left
	pack  $fr.entries.$kw.label -side left -expand y -anchor w
	pack  $fr.entries.$kw -side top -expand yes -fill x -anchor nw
	bind  $fr.entries.$kw.entry <Leave> \"updateEntry $kw\"
	set cont($kw) 0
"
}

proc createNewreal {kw {fr {}}} {

	global keys
	global desc
	global type
	global vlue
	global dflt
	global optn
	global cont
	global exst
	global defs

	set defs "$defs

	frame $fr.entries.$kw

	label $fr.entries.$kw.label  -text \$desc($kw) -foreground [getForeground $optn($kw)]
	entry $fr.entries.$kw.entry -width 10 -relief raised  -borderwidth 2
	pack  $fr.entries.$kw.entry -side left
	pack  $fr.entries.$kw.label -side left -expand y -anchor w
	pack  $fr.entries.$kw -side top -expand yes -fill x -anchor nw
	bind  $fr.entries.$kw.entry <Leave> \"updateEntry $kw\"
	set cont($kw) 0.0
"
}
#	%%% END CONFIG %%%



#----------------------------------------------------------------------
# Read current settings
#
proc readParms {fname} {

	global keys
	global desc
	global type
	global vlue
	global exst
	global name

	set fd [open $fname r]

	while {[gets $fd line] > -1} {

		set tmp [lindex $line 0]
		if { [regexp {^[ \t]*$} $tmp] || [regexp {^#.*$} $tmp] } continue

		regexp {^[ 	]*([a-zA-Z0-9_]+)[ 	]*=[	 ]*(("([^"]*)")|([^ 	#]+))} $line tmp nam value dummy sval
		if {$sval != {}} {
			set value $sval
		} 
		set key [nameTokey $nam]
		if {[lsearch $keys $key] == -1} {
			putMessage "warning: unknown parameter $nam ingnored"
		} elseif {[check$type($key) $key $value]} { 
                	setParm $key $value
			set exst($key) 1
		}
	}
	close $fd
}

#----------------------------------------------------------------------
# Set a parameter's value in the display
#
proc setParm {kw val} {
	global keys
        global vlue
        global type
	global cont
	global path

	switch $type($kw) {
		real { 
			set cont($kw) $val
			$path($kw).entries.$kw.entry delete 0 end
			$path($kw).entries.$kw.entry insert 0 $val
		}
		integer { 
			set cont($kw) $val
			$path($kw).entries.$kw.entry delete 0 end
			$path($kw).entries.$kw.entry insert 0 $val
		}
		string { 
			set cont($kw) $val
			$path($kw).entries.$kw.entry delete 0 end
			$path($kw).entries.$kw.entry insert 0 $val
		}
		boolean {
			if { $val != $cont($kw) } {
				$path($kw).buttons.$kw invoke
			}
		}
		enum {
			$path($kw).buttons.$kw.$val invoke
		}
	}
}

#----------------------------------------------------------------------
# setDefaults: set every field to its default value
#
proc setDefaults {} {
	global keys
        global dflt
	global exst

	foreach key $keys {
		if {$dflt($key) != {}} {
			setParm $key $dflt($key)
			set exst($key) 1
		}
	}
}

#----------------------------------------------------------------------
# Check functions: check a given value against its configured type
#
proc checkreal {kw val} {

        if { [regexp {^[+-]?[0-9]+\.?([eE][+-]?[0-9]+)?$} $val] \
        || [regexp {^[+-]?[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?$} $val]} {
		set ret 1
	} else {
		putMessage "format error in $kw: $val is not a real number"
		set ret 0
	} 
	return $ret
}

proc checkinteger {kw val} {

	if {[regexp {^[+-]?[0-9]+$} $val]} {
		set ret 1
	} else {
		putMessage "format error in $kw: $val is not an integer"
		set ret 0
	} 
	return $ret
}

proc checkstring {kw val} {
	global vlue

	if {[regexp $vlue($kw) $val]} {
		set ret 1
	} else {
		putMessage "format error in $kw: $val does not match $vlue($kw)"
		set ret 0
	} 
	return $ret
}

proc checkboolean {kw val} {
	checkenum $kw $val
}

proc checkenum {kw val} {
	global vlue

	set vlist [split $vlue($kw) {|}]	
	
	if {[lsearch $vlist $val] != -1} {
		set ret 1
	} else {
		putMessage [format "format error in %s: $val is not in %s" \
			$kw $vlue($kw)]
		set ret 0
	} 
	return $ret
}

proc updateEntry {kw} {
	global cont
	global exst
	global path

	set cont($kw) [string trim [$path($kw).entries.$kw.entry get]]
	$path($kw).entries.$kw.entry delete 0 end
	$path($kw).entries.$kw.entry insert 0 $cont($kw)
	if {$cont($kw) == ""} {
		set exst($kw) 0
	} else {
		set exst($kw) 1
	}
}

#----------------------------------------------------------------------
# Put a string in the message line
#
proc putMessage {msg {nl "\n"}} {
	popupMessage
	.status.msg  yview {end - 8 lines}
	.status.msg configure -state normal
	.status.msg insert end "$msg$nl"
	.status.msg configure -state disabled
}

proc clearMessage {} {	
	.status.msg configure -state normal
	.status.msg delete 1.0 end
	.status.msg configure -state disabled
}

proc popupMessage {} {
	global isopen
	global multipleWindows

	if {![info exists isopen]} {
		set isopen 0
	}
	if {$isopen} return

	if {$multipleWindows} {
		frame .status
		pack .status -side top -fill both -expand yes
	} else {
		toplevel .status
	}
	text .status.msg -wrap none \
		-height 10 -width 80 \
		-state disabled -borderwidth 1 \
		-relief sunken \
		-yscrollcommand ".status.yscr set" \
		-background white \
		-font -*-lucidatypewriter-medium-*-*-*-*-*-*-*-*-*-*-*

	scrollbar .status.yscr -command ".status.msg yview"

	frame .status.b
	button .status.b.clear -text "  Clear Messages  "\
		 -command clearMessage
	button .status.b.dismiss -text "  Dismiss Messages  "\
		 -command dismissMessage
	pack .status.b.clear .status.b.dismiss -side right -anchor s
	pack .status.b -side bottom -fill x -expand y

	pack .status.yscr -side left -fill y -expand y -anchor w
	pack .status.msg -fill both -expand y
	set isopen 1
}

proc dismissMessage {} {
	global isopen
	set isopen 0
	destroy .status
}

proc toggleWin {w} {
	upvar m_$w flag
	if {!$flag} {
		wm withdraw $w
	} else {
		wm deiconify $w
	}
}

#----------------------------------------------------------------------
# File operations
#
proc newParms {} {

	global keys
	global exst
        global vlue
        global type
	global cont
	global path

	foreach kw $keys {
		set exst($kw) 0
		switch $type($kw) {
			real - integer { 
				set cont($kw) 0
				$path($kw).entries.$kw.entry delete 0 end
				$path($kw).entries.$kw.entry insert 0 {}
			}
			string { 
				set cont($kw) {}
				$path($kw).entries.$kw.entry delete 0 end
				$path($kw).entries.$kw.entry insert 0 {}
			}
			boolean {
				$path($kw).buttons.$kw deselect
			}
			enum {
				$path($kw).buttons.$kw.[lindex [split $vlue($kw) {|}] 0] invoke
			}
		}
	}
}

proc openParms {} {

	global parfile

	set parfile [fileSelect "Parameter File Selection" r]
	if {$parfile != -1} {
		newParms
		readParms $parfile
	} else {
		putMessage "Parameter file selection aborted."
	}
}

proc saveParms {} {

	global parfile

	if {![info exists parfile]} {
		set parfile [fileSelect "Parameter File Selection"]
	}
	writeParms $parfile
}

proc writeParms {fname} {

	global keys
	global desc
	global vlue
	global type
	global cont
	global exst
	global name

	set fd [open $fname "w"]

	foreach kw $keys {
		if {$exst($kw)} {
			if {$type($kw) == {string}} {
				puts $fd [format {%-20s = %10s # %s} \
					$name($kw) \"$cont($kw)\" $desc($kw)]
			} else {
				puts $fd [format {%-20s = %10s # %s} \
					$name($kw) $cont($kw) $desc($kw)]
			}
		} else {
			puts $fd [format {# %-19s = <not set> # %s} \
					$name($kw) $desc($kw)]
		}
	}
	close $fd
}

proc checkParms {} {

	global keys
	global type
	global optn
	global cont
	global exst

	set ok 1
	foreach kw $keys {
		if {$exst($kw)} {
			if {![check$type($kw) $kw $cont($kw)]} {
				set ok 0
			}
		} elseif {$optn($kw) == "!"} {
			set ok 0
			putMessage "mandatory parameter $kw not set"
		}
	}
	return $ok
}

proc viewParms {} {

	global keys
	global desc
	global type
	global vlue
	global cont
	global exst
	global name

	foreach kw $keys {
		if {$exst($kw)} {
			if {$type($kw) == {string}} {
				putMessage [format {%-20s = %10s # %s} \
					$name($kw) \"$cont($kw)\" $desc($kw)]
			} else {
				putMessage [format {%-20s = %10s # %s} \
					$name($kw) $cont($kw) $desc($kw)]
			}
		} else {
			putMessage [format {# %-19s = <not set> # %s} \
					$name($kw) $desc($kw)]
		}
	}
}

#----------------------------------------------------------------------
# Run callbacks
#
proc runProg args {

	global cmd
	global pid
	global tmppar

	set running no
	if {[info exists pid]} {

		set fd [open "|ps" "r"]
		while {[gets $fd line] != -1} {
			if {[regexp "^\[\ \]*$pid" $line]} {
				set running yes
				unset pid
				break
			}
		}
		close $fd
	}
	if {$running} {
		putMessage "$cmd is still running."
	} else {
		if {[checkParms]} {
			writeParms $tmppar
			set pid [eval exec $args $cmd $tmppar \&]
			putMessage "$cmd started."
		} else {
			putMessage "$cmd not started."
		}
	}
}

proc fgRun {} {

	global cmd tmppar cmdpipe

	if {![checkParms]} {
		putMessage "$cmd not started."
		return
	}
	writeParms $tmppar
	set cmdpipe [open "|$cmd $tmppar 2>&1" "r"]

	fileevent $cmdpipe readable {
		if {[eof $cmdpipe]} {
			fileevent $cmdpipe readable {}
			close $cmdpipe
		} else {
			set line [read $cmdpipe 5]
			putMessage $line {}
		}
	}
}

proc killProg {sig} {
	global pid

	set msg "Nothing to kill."

	if [info exists pid] {
		if [catch {exec kill -$sig $pid}] {
			set msg "cannot kill $pid."
		} else {
			set msg "$pid killed."
		}
		unset pid
	}
	putMessage $msg
}


#----------------------------------------------------------------------


proc fsbOk {} {
	global ret
	global fsbpath

	set sel [.fsb.entry get]

	if {$sel == {}} {
		set ret -1
	} else {
		set ret $fsbpath/$sel
	}
	destroy .fsb
}

proc fsbCd {mode} {
	global fsbpath

	set sel [lindex [.fsb.d.list curselection] 0]

	if {$sel != {}} {
		set shargs [format "cd %s; pwd" $fsbpath/[.fsb.d.list get $sel]]
		set fsbpath [exec sh -c [format "cd %s; pwd" $fsbpath/[.fsb.d.list get $sel]]]
		fillFsb $fsbpath $mode
	}
}


proc fillFsb {path mode} {

	set files [split [exec ls -a1 $path] "\n"]

	.fsb.f.list delete 0 end
	.fsb.d.list delete 0 end

	.fsb.d.list insert end {..}
	foreach f [split [exec ls -1 $path] "\n"] {
		if { [file isdirectory $path/$f] } {
			.fsb.d.list insert end $f
		} else {
			set ins 1
			if {[string match {*x*} $mode] 
				&& ![file executable $path/$f]} {
				set ins 0
			}
			if {[string match {*r*} $mode] 
				&& ![file readable $path/$f]} {
				set ins 0
			}
			if {[string match {*w*} $mode] 
				&& ![file writable $path/$f]} {
				set ins 0
			}
			if {$ins} {
				if {[file executable $path/$f]} {
					set attr " *"
				} else {
					set attr ""
				}
				.fsb.f.list insert end "$f$attr"
			}
		}
	}
}

proc fsbGet {pos} {

	set sel [.fsb.f.list nearest $pos]
	if {$sel != {}} {
		.fsb.entry delete 0 end
		.fsb.entry insert end [lindex [split [.fsb.f.list get $sel]] 0]
	}
}

proc fileSelect {title {mode r}} {

	toplevel .fsb
	grab .fsb
	wm title .fsb $title

	global ret
	global fsbpath

	set fsbpath {.}

	frame .fsb.d -borderwidth 1 -relief ridge -background lightgrey
	frame .fsb.f -borderwidth 1 -relief ridge -background lightgrey

	entry .fsb.entry -background white -relief sunken
	bind .fsb.entry <Return> fsbOk
	bind .fsb.entry <KP_Enter> fsbOk

	button .fsb.d.button -text cd -command "fsbCd $mode"
	button .fsb.f.button -text OK -command fsbOk

	label .fsb.d.label -text Directories
	label .fsb.f.label -text Files

	if {[info tclversion] < 7.4} {

	listbox .fsb.d.list -yscrollcommand {.fsb.d.slide set} \
			-geometry 20x10 \
			-relief sunken \
			-borderwidth 1

	
	listbox .fsb.f.list -yscrollcommand {.fsb.f.slide set} \
			-geometry 20x10 \
			-relief sunken \
			-borderwidth 1
	} else {
	listbox .fsb.d.list -yscrollcommand {.fsb.d.slide set} \
			-width 20 -height 10 \
			-relief sunken \
			-borderwidth 1

	
	listbox .fsb.f.list -yscrollcommand {.fsb.f.slide set} \
			-width 20 -height 10 \
			-relief sunken \
			-borderwidth 1
	}
	scrollbar .fsb.f.slide  -command ".fsb.f.list yview"
	scrollbar .fsb.d.slide  -command ".fsb.d.list yview"

	bind .fsb.f.list <Double-Button-1> fsbOk
	bind .fsb.f.list <Button-1> "+fsbGet %y"
	bind .fsb.d.list <Double-Button-1> "fsbCd $mode"

	fillFsb . $mode

	pack .fsb.entry -side top -fill x -expand yes
	pack .fsb.d.label -side top -fill x -expand y
	pack .fsb.d.button -side bottom -fill x -expand yes
	pack .fsb.d.slide .fsb.d.list \
		-side left -expand y -fill both -padx 3 -pady 3

	pack .fsb.f.label -side top -fill x -expand y
	pack .fsb.f.button -side bottom -fill x -expand yes
	pack .fsb.f.list .fsb.f.slide \
		-side left -expand y -fill both -padx 3 -pady 3

	pack .fsb.d .fsb.f -side left -fill both -expand yes

	tkwait window .fsb
	return $ret
}	

#----------------------------------------------------------------------
# Clean up procedure
#

proc cleanUp {} {

	global tmppar

#	%%% START CONFIG %%%
	global tmpcnf
	exec rm -f $tmpcnf
#	%%% END CONFIG %%%

	killProg 9
	exec rm -f $tmppar
}	

#----------------------------------------------------------------------
# Main procedure: determine the configuration source, invoke configuration
#

proc main {argc argv} {

	global keys
	global tmpcnf
	global tmppar
	global cmd

	set tmppar "tkjoe.par"

#	%%% INCLUDE STARTUP %%%
#	%%% START CONFIG %%%

	set tmpcnf "tkjoe.cnf"
	wm withdraw .
	if {$argc > 1} {
		puts stderr {usage: tkjoe [command|filename]}
		exit 1
	} 
	if {$argc == 1} {
		set cmd [lindex $argv 0]
	} else {	
		set cmd	[fileSelect "Program Selection" r]
	}
	if {$cmd == "-1" || ![info exists cmd]} {
		puts stderr "tkjoe: No file or command selected"
		exit 1
	}
	if {[file readable $cmd]} {
		if  {[file executable $cmd]} {
			set fd [open {|sh} {w}]
			puts $fd [format {%s -help 2>%s} $cmd $tmpcnf]
			puts $fd "cat $tmpcnf >/dev/null"
			close $fd
		} else {
			exec cp $cmd $tmpcnf
		}
	} else {
		puts stderr "tkjoe: cannot open $cmd"
		exit 1
	} 
	readConfig $tmpcnf

	wm deiconify .

#	%%% END CONFIG %%%


	setDefaults
	if {[file readable $cmd.in]} {
		readParms $cmd.in
	}
	viewParms

}

#----------------------------------------------------------------------
# Here we go
#

main $argc $argv


#================================EOF===================================
